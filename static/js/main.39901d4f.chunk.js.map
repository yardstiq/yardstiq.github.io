{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","X","changeGate","bind","gate","gateMap","T","H","CNOT","QFT","QCBM","this","setState","classes","className","root","CssBaseline","AppBar","position","appBar","Toolbar","Typography","variant","noWrap","Grid","container","direction","justify","alignItems","item","xs","Drawer","drawer","paper","drawerPaper","drawerContainer","List","map","text","index","ListItem","button","onClick","ListItemText","primary","data","options","scales","yAxes","ticks","beginAtZero","React","Component","makeStyles","theme","display","zIndex","width","flexShrink","overflow","content","flexGrow","padding","spacing","useStyles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uaAyBMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQC,EACb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHD,E,8CAMnB,SAAWC,GACT,IAAMC,EAAU,CACdJ,IACAK,IACAC,IACAC,OACAC,MACAC,QAEFC,KAAKC,UAAS,SAACZ,GAAD,OACZK,EAAQD,Q,oBAIZ,WAAU,IAAD,OACCS,EAAYF,KAAKZ,MAAjBc,QAYT,OACC,sBAAKC,UAAWD,EAAQE,KAAxB,UACE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAQJ,UAAWD,EAAQM,OAA5C,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,EAA/B,0BAKJ,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SAJb,UAME,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CACEjB,UAAWD,EAAQmB,OACnBV,QAAQ,YACRT,QAAS,CACToB,MAAOpB,EAAQqB,aAJjB,UAOE,cAACd,EAAA,EAAD,IACA,qBAAKN,UAAWD,EAAQsB,gBAAxB,SACE,cAACC,EAAA,EAAD,UACG,CAAC,IAAK,IAAK,IAAK,OAAQ,OAAQ,OAAOC,KAAI,SAACC,EAAMC,GAAP,OAC1C,cAACC,EAAA,EAAD,CAAUC,QAAM,EAAYC,QAAS,WAAQ,EAAKxC,WAAWoC,IAA7D,SACE,cAACK,EAAA,EAAD,CAAcC,QAASN,KADHA,eAQhC,cAACd,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACf,eAACN,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,UACE,cAACV,EAAA,EAAD,IACA,cAAC,IAAD,CAAMyB,KAAMlC,KAAKX,MAAM6C,KAAMC,QAlDnB,CAChBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,YA+CjB,cAAC1B,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,c,GA3ELqB,IAAMC,WAkFT,aACb,IAyBMvC,EAvBYwC,aAAW,SAACC,GAAD,MAAY,CACxCvC,KAAM,CACJwC,QAAS,QAEXpC,OAAQ,CACNqC,OAAQF,EAAME,OAAOxB,OAAS,GAEhCA,OAAQ,CACNyB,MAViB,IAWjBC,WAAY,GAEdxB,YAAa,CACXuB,MAdiB,KAgBnBtB,gBAAiB,CACfwB,SAAU,QAEZC,QAAS,CACPC,SAAU,EACVC,QAASR,EAAMS,QAAQ,OAIVC,GAChB,OACE,cAAC,EAAD,CAAKnD,QAASA,KCzHHoD,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.39901d4f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { Line } from 'react-chartjs-2';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\n//import Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\n//import ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport X from './data/X.json';\nimport T from './data/T.json';\nimport H from './data/H.json';\nimport CNOT from './data/CNOT.json';\nimport QFT from './data/QFT.json';\nimport QCBM from './data/QCBM.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = X;\n    this.changeGate = this.changeGate.bind(this);\n  }\n\n  changeGate(gate) {\n    const gateMap = {\n      X,\n      T,\n      H,\n      CNOT,\n      QFT,\n      QCBM,\n    };\n    this.setState((state) => (\n      gateMap[gate]\n    ));\n  }\n\n  render() {\n    const { classes } = this.props;\n    const options = {\n  \t\tscales: {\n  \t  \tyAxes: [\n  \t    \t{\n  \t      \tticks: {\n  \t        \tbeginAtZero: true,\n  \t      \t},\n  \t    \t},\n  \t  \t],\n  \t\t},\n    };\n  \treturn (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            Yardstiq\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={2}>\n          <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n\t\t\t\t\t\t\t\t\t\t  paper: classes.drawerPaper,\n            }}\n          >\n            <Toolbar />\n            <div className={classes.drawerContainer}>\n              <List>\n                {['X', 'H', 'T', 'CNOT', 'QCBM', 'QFT'].map((text, index) => (\n                  <ListItem button key={text} onClick={() => { this.changeGate(text); }}>\n                    <ListItemText primary={text} />\n                  </ListItem>\n                ))}\n              </List>\n            </div>\n          </Drawer>\n        </Grid>\n        <Grid item xs={1} />\n        <Grid item xs={8}>\n          <Toolbar />\n          <Line data={this.state.data} options={options} />\n        </Grid>\n        <Grid item xs={1} />\n      </Grid>\n    </div>\n  \t);\n  }\n}\n\nexport default () => {\n  const drawerWidth = 240;\n\n  const useStyles = makeStyles((theme) => ({\n\t  root: {\n\t    display: 'flex',\n\t  },\n\t  appBar: {\n\t    zIndex: theme.zIndex.drawer + 1,\n\t  },\n\t  drawer: {\n\t    width: drawerWidth,\n\t    flexShrink: 0,\n\t  },\n\t  drawerPaper: {\n\t    width: drawerWidth,\n\t  },\n\t  drawerContainer: {\n\t    overflow: 'auto',\n\t  },\n\t  content: {\n\t    flexGrow: 1,\n\t    padding: theme.spacing(3),\n\t  },\n  }));\n\n  const classes = useStyles();\n  return (\n    <App classes={classes} />\n  );\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}